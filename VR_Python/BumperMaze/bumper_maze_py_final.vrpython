{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nimport math\nimport random\nfrom vexcode_vr import *\n\n# Brain should be defined by default\nbrain=Brain()\n\ndrivetrain = Drivetrain(\"drivetrain\", 0)\npen = Pen(\"pen\", 8)\npen.set_pen_width(THIN)\nleft_bumper = Bumper(\"leftBumper\", 2)\nright_bumper = Bumper(\"rightBumper\", 3)\nfront_eye = EyeSensor(\"frontEye\", 4)\ndown_eye = EyeSensor(\"downEye\", 5)\nfront_distance = Distance(\"frontdistance\", 6)\ndistance = front_distance\nmagnet = Electromagnet(\"magnet\", 7)\nlocation = Location(\"location\", 9)\n#endregion VEXcode Generated Robot Configuration\n#nocutandpaste\n\n\ndef init():\n    #sets up the code required for the project\n    brain.timer_reset()\n    drivetrain.set_drive_velocity(65, PERCENT)\n    drivetrain.set_turn_velocity(100, PERCENT)\n    pen.set_pen_color(BLUE)\n    pen.move(DOWN)\n    pen.set_pen_width(EXTRA_WIDE)\n\n#regular turn functions, for use when there is a fork in the maze\n#in which bumpLeft or bumpRight are not appropriate\ndef turnLeft(degreesToTurn, driveLength):  \n    drivetrain.turn_for(LEFT, degreesToTurn, DEGREES)\n    drivetrain.drive_for(FORWARD, driveLength, MM)\n\ndef turnRight(degreesToTurn, driveLength):\n    drivetrain.turn_for(RIGHT, degreesToTurn, DEGREES)\n    drivetrain.drive_for(FORWARD, driveLength, MM)\n\ndef bumpLeft(iterations):\n    for i in range(int(iterations)):\n        drivetrain.turn_for(LEFT, 90, DEGREES)\n        drivetrain.drive(FORWARD)    \n        while not left_bumper.pressed():\n            #wait(5, MSEC)\n        drivetrain.stop()\n        #wait(5, MSEC)\n\ndef bumpRight(iterations):\n    for i in range(int(iterations)):\n        drivetrain.turn_for(RIGHT, 90, DEGREES)\n        drivetrain.drive(FORWARD)\n        while not left_bumper.pressed():\n            #wait(5, MSEC)\n        drivetrain.stop()\n        #wait(5, MSEC)\n\n#Go_To functions\ndef Go_To_1():\n    bumpRight(1)\n    bumpLeft(1)\n    bumpRight(3)\n\ndef Go_To_2():\n    bumpLeft(2)\n    pen.set_pen_color(GREEN)\n    pen.set_pen_width(MEDIUM)\n    #the pen has varying widths so it is clear which colors came first\n    bumpLeft(5)\n\ndef Go_To_A():\n    pen.set_pen_color(RED)\n    pen.set_pen_width(WIDE)\n    bumpRight(2)\n    bumpLeft(3)\n    bumpRight(2)\n\ndef Go_To_B():\n    pen.set_pen_width(THIN)\n    pen.set_pen_color(RED)\n    bumpLeft(1)\n    #when using turn functions, it will make the robot turn for the specified number of degrees (the first argument)\n    #and then drive for a specified number of mm (the second argument)\n    turnRight(90, 250)\n    bumpRight(3)\n\ndef Go_To_3():\n    pen.set_pen_width(EXTRA_THIN)\n    pen.set_pen_color(BLUE)\n    bumpLeft(5)\n    bumpRight(1)\n    bumpLeft(1)\n    bumpRight(3)\n\ndef Go_To_C():\n    pen.set_pen_color(RED)\n    bumpRight(2)\n    bumpLeft(2)\n    turnLeft(90, 500)\n    bumpLeft(1)\n    bumpRight(1)\n    bumpLeft(2)\n    bumpRight(1)\n    bumpLeft(1)\n\ndef Go_To_4():\n    pen.set_pen_color(GREEN)\n    bumpRight(3)\n    turnLeft(90, 250)\n    bumpRight(2)\n    bumpLeft(3)\n    bumpRight(2)\n    bumpLeft(2)\n\ndef Go_To_D():\n    pen.set_pen_color(RED)\n    bumpLeft(2)\n    bumpRight(2)\n    bumpLeft(4)\n\n#Go_To functions\n\ndef main():\n    init()\n    #code below makes the robot go to 1, A, 2, B, 3, C, 4, and D, in their respective order\n    #uses the functions from above\n    Go_To_1()\n    Go_To_A()\n    Go_To_2()\n    Go_To_B()\n    Go_To_3()\n    Go_To_C()\n    Go_To_4()\n    Go_To_D()\n\nvr_thread(main())","textLanguage":"python","rconfig":[],"slot":0,"platform":"PG","sdkVersion":"20220726.10.00.00","appVersion":"2.4.4","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","playground":"WallMaze","robotModel":"vr","target":"Physical"}