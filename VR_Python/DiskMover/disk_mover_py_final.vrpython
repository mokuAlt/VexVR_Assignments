{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nimport math\nimport random\nfrom vexcode_vr import *\n\n# Brain should be defined by default\nbrain=Brain()\n\ndrivetrain = Drivetrain(\"drivetrain\", 0)\npen = Pen(\"pen\", 8)\npen.set_pen_width(THIN)\nleft_bumper = Bumper(\"leftBumper\", 2)\nright_bumper = Bumper(\"rightBumper\", 3)\nfront_eye = EyeSensor(\"frontEye\", 4)\ndown_eye = EyeSensor(\"downEye\", 5)\nfront_distance = Distance(\"frontdistance\", 6)\ndistance = front_distance\nmagnet = Electromagnet(\"magnet\", 7)\nlocation = Location(\"location\", 9)\n#endregion VEXcode Generated Robot Configuration\ndef debugger(text):\n    #to help locate where the code error is\n    current_time = brain.timer_time(SECONDS)\n    #color = color.upper()    \n    brain.set_print_color(BLUE)\n    time = f\"[{current_time}]: \"\n    parsed_text = text.split(\"\\n\")\n    #\\n is the newline character in unix-based systems\n    brain.print(time)\n    brain.set_print_color(BLACK)\n    for i in range(len(parsed_text)):\n        brain.print(parsed_text[i])\n        brain.new_line()\n\ndef Blue_Disk_To_Blue_Box(): \n    debugger(\"blue disk to blue box\")\n    drivetrain.drive(FORWARD)\n    while not down_eye.detect(BLUE):\n        wait(5, MSEC)\n    magnet.energize(BOOST)\n    drivetrain.drive_for(REVERSE, 800, MM)\n    magnet.energize(DROP)\n    drivetrain.turn_for(RIGHT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 800, MM)\n\ndef Red_Disk_To_Red_Box():\n    debugger(\"red disk to red box\")\n    drivetrain.turn_for(LEFT, 90, DEGREES)\n    drivetrain.drive(FORWARD)\n    while not down_eye.detect(RED):\n        wait(5, MSEC)\n    magnet.energize(BOOST)\n    drivetrain.drive_for(REVERSE, 800, MM)\n    magnet.energize(DROP)\n    drivetrain.turn_for(RIGHT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 800, MM)\n\ndef Green_Disk_To_Green_Box():\n    debugger(\"green disk to green box\")\n    drivetrain.turn_for(LEFT, 90, DEGREES)\n    drivetrain.drive(FORWARD)\n    while not down_eye.detect(GREEN):\n        wait(5, MSEC)\n    magnet.energize(BOOST)\n    drivetrain.drive_for(REVERSE, 800, MM)\n    magnet.energize(DROP)\n    drivetrain.drive(FORWARD)\n\ndef Green_Disk_To_Red_Box():\n    debugger(\"green disk to red box\")\n    drivetrain.drive_for(FORWARD, 1200, MM)\n    magnet.energize(BOOST)\n    drivetrain.drive_for(REVERSE, 1200, MM)\n    drivetrain.turn_for(LEFT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 800, MM)\n    magnet.energize(DROP)\n    drivetrain.turn_for(RIGHT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 400, MM)\n    drivetrain.turn_for(LEFT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 800, MM)\n\ndef Blue_Disk_To_Red_Box():\n    debugger(\"blue disk to red box\")\n    drivetrain.turn_for(RIGHT, 90, DEGREES)\n    drivetrain.drive(FORWARD)\n    while not down_eye.detect(BLUE):\n        wait(5, MSEC)\n    magnet.energize(BOOST)\n    drivetrain.drive_for(REVERSE, 1200, MM)\n    drivetrain.turn_for(RIGHT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 800, MM)\n    magnet.energize(DROP)\n    drivetrain.drive_for(REVERSE, 800, MM)\n\ndef Blue_Disk_To_Green_Box():\n    \n    debugger(\"blue disk to green box\")\n    drivetrain.turn_for(LEFT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 1600, MM)\n    magnet.energize(BOOST)\n    drivetrain.drive_for(REVERSE, 1600, MM)\n    drivetrain.turn_for(RIGHT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 1600, MM)\n    magnet.energize(DROP)\n    drivetrain.drive_for(REVERSE, 800, MM)\n    drivetrain.turn_for(LEFT, 90, DEGREES)\n\ndef Red_Disk_To_Green_Box():\n    debugger(\"red disk to green box\")\n    drivetrain.drive(FORWARD)\n    while not down_eye.detect(RED):\n        wait(5, MSEC)\n    magnet.energize(BOOST)\n    drivetrain.drive_for(REVERSE, 1200, MM)\n    drivetrain.turn_for(RIGHT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 800, MM)\n    magnet.energize(DROP)\n\ndef Green_Disk_To_Blue_Box():\n    debugger(\"green disk to blue box\")\n    drivetrain.drive_for(REVERSE, 1600, MM)\n    drivetrain.turn_for(RIGHT, 90, DEGREES)\n    drivetrain.drive(FORWARD)\n    while not down_eye.detect(GREEN):\n        wait(5, MSEC)\n    magnet.energize(BOOST)\n    drivetrain.drive_for(FORWARD, 1600, MM)\n    drivetrain.drive_for(REVERSE, 1600, MM)\n    drivetrain.turn_for(LEFT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 1600, MM)\n    magnet.energize(DROP)\n\ndef Red_Disk_To_Blue_Box():\n    debugger(\"red disk to blue box\")\n    drivetrain.drive_for(REVERSE, 800, MM)\n    drivetrain.turn_for(LEFT, 90, DEGREES)\n    drivetrain.drive(FORWARD)\n    while not down_eye.detect(RED):\n        wait(5, MSEC)\n    magnet.energize(BOOST)\n    drivetrain.drive_for(REVERSE, 1600, MM)\n    drivetrain.turn_for(LEFT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 800, MM)\n    magnet.energize(DROP)\n\ndef main():\n    #nocutandpaste\n    #if the disks go out of the box, click the refresh button a few times and it should work normally\n    drivetrain.set_drive_velocity(100, PERCENT)\n    drivetrain.set_turn_velocity(100, PERCENT)\n    #going directly up in order to bring the disks to their respective boxes first\n    Blue_Disk_To_Blue_Box()\n    Red_Disk_To_Red_Box()\n    Green_Disk_To_Green_Box()\n    Green_Disk_To_Red_Box()\n    Blue_Disk_To_Red_Box()\n    Blue_Disk_To_Green_Box()\n    Red_Disk_To_Green_Box()\n    Red_Disk_To_Blue_Box()\n    Green_Disk_To_Blue_Box()\n    stop_project()\n\n\n\n\nvr_thread(main)\n\n\n\n\n\n","textLanguage":"python","rconfig":[],"slot":0,"platform":"PG","sdkVersion":"20220726.10.00.00","appVersion":"2.4.4","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","playground":"DiskMover","robotModel":"vr","target":"Physical"}