{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nimport math\nimport random\nfrom vexcode_vr import *\n\n# Brain should be defined by default\nbrain=Brain()\n\ndrivetrain = Drivetrain(\"drivetrain\", 0)\npen = Pen(\"pen\", 8)\npen.set_pen_width(THIN)\nleft_bumper = Bumper(\"leftBumper\", 2)\nright_bumper = Bumper(\"rightBumper\", 3)\nfront_eye = EyeSensor(\"frontEye\", 4)\ndown_eye = EyeSensor(\"downEye\", 5)\nfront_distance = Distance(\"frontdistance\", 6)\ndistance = front_distance\nmagnet = Electromagnet(\"magnet\", 7)\nlocation = Location(\"location\", 9)\n#endregion VEXcode Generated Robot Configuration\n#nocutandpaste\n\n\"\"\"\ndef goofy_debugger(text, color):\n    current_time = brain.timer_time(SECONDS)\n    color = color.upper()    \n    brain.set_print_color(BLUE)\n    #blue is reserved for the brain's time\n    time = f\"[{current_time}]: \"\n    parsed_text = text.split(\"\\n\")\n    #\\n is the newline character in unix-based systems\n\n    if color in [\"BLACK\", \"RED\", \"GREEN\"]:\n        #checks to see if the color provided is a valid print color\n        brain.print(time)\n        brain.set_print_color(color)\n        for i in range(len(parsed_text)):\n            brain.print(parsed_text[i])\n    elif color == \"BLUE\":\n        #when both the timestamp and message are red, an error has occured.\n        brain.set_print_color(RED)\n        brain.print(\"{time}Error - The color blue is reserved for message timestamps.\")\n        stop_project()\n    else:\n        brain.set_print_color(RED)\n        brain.print(f\"{time}Error - The color you have typed ({color}) is not a valid print color.\")\n        stop_project()\n\"\"\"\n\ndef goofy_debugger(text):\n    current_time = brain.timer_time(SECONDS)\n    #color = color.upper()    \n    brain.set_print_color(BLUE)\n    #blue is reserved for the brain's time\n    time = f\"[{current_time}]: \"\n    parsed_text = text.split(\"\\n\")\n    #\\n is the newline character in unix-based systems\n    brain.print(time)\n    brain.set_print_color(BLACK)\n    for i in range(len(parsed_text)):\n        brain.print(parsed_text[i])\n        brain.new_line()\n\ndef main():\n    brain.timer_reset()\n    goofy_debugger(\"driving for 200 mm...\\n\")\n    drivetrain.drive_for(FORWARD, 200, MM)\n    goofy_debugger(\"done!\\n\")\n\n\nvr_thread(main())","textLanguage":"python","rconfig":[],"slot":0,"platform":"PG","sdkVersion":"20220726.10.00.00","appVersion":"2.4.4","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","playground":"WallMaze","robotModel":"vr","target":"Physical"}